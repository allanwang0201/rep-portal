/*
 * Created on 29 Sep 2017 ( Time 15:10:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package au.com.jaycar.local.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import au.com.jaycar.local.business.service.RelatedproductsService;
import au.com.jaycar.local.business.service.mapping.RelatedproductsServiceMapper;
import au.com.jaycar.local.entity.Products;
import au.com.jaycar.local.entity.Relatedproducts;
import au.com.jaycar.local.entity.jpa.ProductsEntity;
import au.com.jaycar.local.entity.jpa.RelatedproductsEntity;
import au.com.jaycar.local.persistence.PersistenceServiceProvider;
import au.com.jaycar.local.persistence.services.RelatedproductsPersistence;

import org.springframework.stereotype.Component;

/**
 * Implementation of RelatedproductsService
 */
@Component
public class RelatedproductsServiceImpl implements RelatedproductsService {

	private RelatedproductsPersistence relatedproductsPersistence;

	@Resource
	private RelatedproductsServiceMapper relatedproductsServiceMapper;
	
	public RelatedproductsServiceImpl() {
		relatedproductsPersistence = PersistenceServiceProvider.getService(RelatedproductsPersistence.class);
	}
		
	@Override
	public Relatedproducts findById(Integer pk) {
		RelatedproductsEntity entity = relatedproductsPersistence.load(pk);
		return relatedproductsServiceMapper.mapRelatedproductsEntityToRelatedproducts(entity);
	}
	
	@Override
	public Relatedproducts findByCode(String code) {
		String queryName = "ProductsEntity.findByCode";
		Map<String, Object> queryParameters = new HashMap<String, Object>();
		queryParameters.put("code", code);
		RelatedproductsEntity entity = relatedproductsPersistence.loadByNamedQuery(queryName, queryParameters).get(0);
		return relatedproductsServiceMapper.mapRelatedproductsEntityToRelatedproducts(entity);
	}

	@Override
	public List<Relatedproducts> findAll() {
		List<RelatedproductsEntity> entities = relatedproductsPersistence.loadAll();
		List<Relatedproducts> beans = new ArrayList<Relatedproducts>();
		for(RelatedproductsEntity entity : entities) {
			beans.add(relatedproductsServiceMapper.mapRelatedproductsEntityToRelatedproducts(entity));
		}
		return beans;
	}

	@Override
	public Relatedproducts save(Relatedproducts relatedproducts) {
		return update(relatedproducts) ;
	}

	@Override
	public Relatedproducts create(Relatedproducts relatedproducts) {
		if(relatedproductsPersistence.load(relatedproducts.getPk()) != null) {
			throw new IllegalStateException("already.exists");
		}
		RelatedproductsEntity relatedproductsEntity = new RelatedproductsEntity();
		relatedproductsServiceMapper.mapRelatedproductsToRelatedproductsEntity(relatedproducts, relatedproductsEntity);
		RelatedproductsEntity relatedproductsEntitySaved = relatedproductsPersistence.save(relatedproductsEntity);
		return relatedproductsServiceMapper.mapRelatedproductsEntityToRelatedproducts(relatedproductsEntitySaved);
	}

	@Override
	public Relatedproducts update(Relatedproducts relatedproducts) {
		RelatedproductsEntity relatedproductsEntity = relatedproductsPersistence.load(relatedproducts.getPk());
		relatedproductsServiceMapper.mapRelatedproductsToRelatedproductsEntity(relatedproducts, relatedproductsEntity);
		RelatedproductsEntity relatedproductsEntitySaved = relatedproductsPersistence.save(relatedproductsEntity);
		return relatedproductsServiceMapper.mapRelatedproductsEntityToRelatedproducts(relatedproductsEntitySaved);
	}

	@Override
	public void delete(Integer pk) {
		relatedproductsPersistence.delete(pk);
	}

	public RelatedproductsPersistence getRelatedproductsPersistence() {
		return relatedproductsPersistence;
	}

	public void setRelatedproductsPersistence(RelatedproductsPersistence relatedproductsPersistence) {
		this.relatedproductsPersistence = relatedproductsPersistence;
	}

	public RelatedproductsServiceMapper getRelatedproductsServiceMapper() {
		return relatedproductsServiceMapper;
	}

	public void setRelatedproductsServiceMapper(RelatedproductsServiceMapper relatedproductsServiceMapper) {
		this.relatedproductsServiceMapper = relatedproductsServiceMapper;
	}



}
