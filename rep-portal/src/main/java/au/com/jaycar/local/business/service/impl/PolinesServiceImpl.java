/*
 * Created on 29 Sep 2017 ( Time 15:10:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package au.com.jaycar.local.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import java.util.Date;
import java.util.HashMap;

import au.com.jaycar.local.business.service.PolinesService;
import au.com.jaycar.local.business.service.mapping.PolinesServiceMapper;
import au.com.jaycar.local.entity.Polines;
import au.com.jaycar.local.entity.Products;
import au.com.jaycar.local.entity.jpa.PolinesEntity;
import au.com.jaycar.local.entity.jpa.ProductsEntity;
import au.com.jaycar.local.persistence.PersistenceServiceProvider;
import au.com.jaycar.local.persistence.services.PolinesPersistence;

import org.springframework.stereotype.Component;

/**
 * Implementation of PolinesService
 */
@Component
public class PolinesServiceImpl implements PolinesService {

	private PolinesPersistence polinesPersistence;

	@Resource
	private PolinesServiceMapper polinesServiceMapper;
	
	public PolinesServiceImpl() {
		polinesPersistence = PersistenceServiceProvider.getService(PolinesPersistence.class);
	}
		
	@Override
	public Polines findById(Integer pk) {
		PolinesEntity entity = polinesPersistence.load(pk);
		return polinesServiceMapper.mapPolinesEntityToPolines(entity);
	}

	@Override
	public Polines findByCode(String code) {
		
		String queryName = "PolinesEntity.findByCode";
		Map<String, Object> queryParameters = new HashMap<String, Object>();
		queryParameters.put("code", code);
		List<PolinesEntity> entities = polinesPersistence.loadByNamedQuery(queryName, queryParameters);
	    Polines polines = null;
	    if(entities.size() > 0)
	    	polines =  polinesServiceMapper.mapPolinesEntityToPolines(entities.get(0));
	    
	   return polines;
	}
	
	@Override
	public List<Polines> findAll() {
		List<PolinesEntity> entities = polinesPersistence.loadAll();
		List<Polines> beans = new ArrayList<Polines>();
		for(PolinesEntity entity : entities) {
			beans.add(polinesServiceMapper.mapPolinesEntityToPolines(entity));
		}
		return beans;
	}

	@Override
	public Polines save(Polines polines) {
		return update(polines) ;
	}

	@Override
	public Polines create(Polines polines) {
		if(polinesPersistence.load(polines.getPk()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PolinesEntity polinesEntity = new PolinesEntity();
		polinesServiceMapper.mapPolinesToPolinesEntity(polines, polinesEntity);
		PolinesEntity polinesEntitySaved = polinesPersistence.save(polinesEntity);
		return polinesServiceMapper.mapPolinesEntityToPolines(polinesEntitySaved);
	}

	@Override
	public Polines update(Polines polines) {
		PolinesEntity polinesEntity = polinesPersistence.load(polines.getPk());
		polinesServiceMapper.mapPolinesToPolinesEntity(polines, polinesEntity);
		PolinesEntity polinesEntitySaved = polinesPersistence.save(polinesEntity);
		return polinesServiceMapper.mapPolinesEntityToPolines(polinesEntitySaved);
	}

	@Override
	public void delete(Integer pk) {
		polinesPersistence.delete(pk);
	}

	public PolinesPersistence getPolinesPersistence() {
		return polinesPersistence;
	}

	public void setPolinesPersistence(PolinesPersistence polinesPersistence) {
		this.polinesPersistence = polinesPersistence;
	}

	public PolinesServiceMapper getPolinesServiceMapper() {
		return polinesServiceMapper;
	}

	public void setPolinesServiceMapper(PolinesServiceMapper polinesServiceMapper) {
		this.polinesServiceMapper = polinesServiceMapper;
	}

}
