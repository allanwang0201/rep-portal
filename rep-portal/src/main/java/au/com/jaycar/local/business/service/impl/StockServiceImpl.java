/*
 * Created on 29 Sep 2017 ( Time 15:10:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package au.com.jaycar.local.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import au.com.jaycar.local.business.service.StockService;
import au.com.jaycar.local.business.service.mapping.StockServiceMapper;
import au.com.jaycar.local.entity.Products;
import au.com.jaycar.local.entity.Stock;
import au.com.jaycar.local.entity.jpa.ProductsEntity;
import au.com.jaycar.local.entity.jpa.StockEntity;
import au.com.jaycar.local.persistence.PersistenceServiceProvider;
import au.com.jaycar.local.persistence.services.StockPersistence;

import org.springframework.stereotype.Component;

/**
 * Implementation of StockService
 */
@Component
public class StockServiceImpl implements StockService {

	private StockPersistence stockPersistence;

	@Resource
	private StockServiceMapper stockServiceMapper;
	
	public StockServiceImpl() {
		stockPersistence = PersistenceServiceProvider.getService(StockPersistence.class);
	}
		
	@Override
	public Stock findById(Integer pk) {
		StockEntity entity = stockPersistence.load(pk);
		return stockServiceMapper.mapStockEntityToStock(entity);
	}


	@Override
	public Stock findByCode(String code) {
		String queryName = "StockEntity.findByCode";
		Map<String, Object> queryParameters = new HashMap<String, Object>();
		queryParameters.put("code", code);
		StockEntity entity = stockPersistence.loadByNamedQuery(queryName, queryParameters).get(0);
		return stockServiceMapper.mapStockEntityToStock(entity);
	}
	
	@Override
	public List<Stock> findAll() {
		List<StockEntity> entities = stockPersistence.loadAll();
		List<Stock> beans = new ArrayList<Stock>();
		for(StockEntity entity : entities) {
			beans.add(stockServiceMapper.mapStockEntityToStock(entity));
		}
		return beans;
	}

	@Override
	public Stock save(Stock stock) {
		return update(stock) ;
	}

	@Override
	public Stock create(Stock stock) {
		if(stockPersistence.load(stock.getPk()) != null) {
			throw new IllegalStateException("already.exists");
		}
		StockEntity stockEntity = new StockEntity();
		stockServiceMapper.mapStockToStockEntity(stock, stockEntity);
		StockEntity stockEntitySaved = stockPersistence.save(stockEntity);
		return stockServiceMapper.mapStockEntityToStock(stockEntitySaved);
	}

	@Override
	public Stock update(Stock stock) {
		StockEntity stockEntity = stockPersistence.load(stock.getPk());
		stockServiceMapper.mapStockToStockEntity(stock, stockEntity);
		StockEntity stockEntitySaved = stockPersistence.save(stockEntity);
		return stockServiceMapper.mapStockEntityToStock(stockEntitySaved);
	}

	@Override
	public void delete(Integer pk) {
		stockPersistence.delete(pk);
	}

	public StockPersistence getStockPersistence() {
		return stockPersistence;
	}

	public void setStockPersistence(StockPersistence stockPersistence) {
		this.stockPersistence = stockPersistence;
	}

	public StockServiceMapper getStockServiceMapper() {
		return stockServiceMapper;
	}

	public void setStockServiceMapper(StockServiceMapper stockServiceMapper) {
		this.stockServiceMapper = stockServiceMapper;
	}


}
